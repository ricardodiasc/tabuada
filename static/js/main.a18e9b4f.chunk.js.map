{"version":3,"sources":["logo.svg","logic/GameLogic.js","components/GameOver.js","components/DigitButton.js","components/Keyboard.js","components/Tabuada.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","GameLogic","props","Grid","score","record","DigitButton","digit","onClick","Button","style","margin","variant","color","Keyboard","onKeyPressed","item","container","xs","sm","md","lg","alignItems","justify","map","num","key","gameLogic","constructor","this","gameStarted","gameOver","n1","n2","result","startGame","bind","testResult","gameInProgress","_newChallenge","_getRandom","max","Math","floor","random","setGameOver","guess","withStyles","theme","root","flexGrow","paper","width","height","chalenge","setN1","useState","setN2","timer","setTimer","setResult","useEffect","cronTimer","setInterval","oldTimer","clearInterval","newGame","answer","registerNumber","e","a","parseInt","target","innerText","GameOver","Paper","fontSize","padding","LinearProgress","value","App","Component","render","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a18e9b4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class GameLogic {\n    /**\n     * Construc a new game logic\n     * \n     * @constructor\n     */\n    constructor(){\n        this.gameStarted = false;\n        this.gameOver = false;\n        this.score = 0;\n        this.n1 = 0;\n        this.n2 = 0;\n        this.result = '';\n\n        this.record = 0;\n\n        this.startGame.bind(this);\n        this.testResult.bind(this);\n    }\n\n    /**\n     * Start a new game\n     */\n    startGame() {\n        this.gameInProgress = true;\n        this.gameOver = false;\n        this.score = 0;\n        this._newChallenge();            \n    }\n\n    _newChallenge() {\n        this.n1 = this._getRandom(10);\n        this.n2 = this._getRandom(10);\n        this.result = this.n1 * this.n2;\n    }\n\n\n\n    /**\n     * Generate a random number between 0 and max parameter\n     * \n     * @param {number} max max number generation from 0 \n     */\n    _getRandom(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    setGameOver() {\n        this.gameInProgress = false;\n        this.gameOver = true;\n        if(this.score > this.record) {\n            this.record = this.score;\n        }\n        this.gameInProgress = false;\n    }\n\n    /**\n     * Test if the guess maches with result expected\n     * \n     * @param {number} guess \n     * @returns {boolean} - Return true if the guess maches with the expected result\n     */\n    testResult(guess) {\n        if(guess === this.result) {\n            this.score = this.score + 1;\n            this._newChallenge();\n        } else {\n            this.setGameOver();\n        }\n        return this.gameInProgress;\n    }\n}\n\nexport default GameLogic;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nexport default  (props) => {\n    return (\n    <Grid>\n        <h1>Game Over</h1>\n        <p>Acertos: {props.score}</p>\n        <p>Recorde: {props.record}</p>\n    </Grid>\n)};\n\n\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nconst DigitButton = ({ digit, onClick }) => {\n  return (\n    <Button\n      style={{ margin: \"1px 1px\" }}\n      onClick={onClick}\n      variant=\"contained\"\n      color=\"primary\"\n    >\n      {digit}\n    </Button>\n  );\n};\n\nexport default DigitButton;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DigitButton from \"./DigitButton\";\n\nconst Keyboard = ({ onKeyPressed }) => {\n  return (\n    <Grid\n      \n      item\n      container\n      xs={7}\n      sm={4}\n      md={3}\n      lg={2}\n      alignItems=\"center\"\n      justify=\"center\"\n    >\n      {[7, 8, 9, 4, 5, 6, 1, 2, 3, 0].map((num) => (\n        <DigitButton key={num} digit={num} onClick={onKeyPressed} />\n      ))}\n    </Grid>\n  );\n};\n\nexport default Keyboard;\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport {LinearProgress} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport GameLogic from \"../logic/GameLogic\";\nimport GameOver from \"./GameOver\";\nimport Keyboard from \"./Keyboard\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    width: 100,\n    height: 140,\n  },\n\n  chalenge: {\n    height: 120,\n  },\n});\n\nconst gameLogic = new GameLogic();\n\nconst Tabuada = () => {\n  const [n1, setN1] = useState(gameLogic.n1);\n  const [n2, setN2] = useState(gameLogic.n2);\n  const [timer, setTimer] = useState(102);\n  const [result, setResult] = useState(gameLogic.result);\n\n  useEffect(() => {\n    const cronTimer = setInterval(() => {\n      setTimer((oldTimer) => {\n        if(oldTimer === 0) {\n          gameLogic.setGameOver();\n          return 135;\n        }\n\n        return oldTimer - 1;\n\n      })\n    }, 100);\n\n    return () => clearInterval(cronTimer);\n  });  \n\n  const newGame = () => {\n    gameLogic.startGame();\n    setN1(gameLogic.n1);\n    setN2(gameLogic.n2);\n    setTimer(100);\n  };\n\n  const answer = () => {\n    if (result !== \"\" && gameLogic.testResult(result)) {\n      //TODO: Change to useTabuadaGameLogic com objeto\n      setTimer(oldTimer => {\n        return oldTimer + 30;\n      })\n      setN1(gameLogic.n1);\n      setN2(gameLogic.n2);\n    }\n\n    setResult(\"\");\n  };\n\n  const registerNumber = (e) => {\n    let a = parseInt(result + e.target.innerText);\n    setResult(a);\n  };\n\n  const renderMainMenu = () => {\n    return (\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <Button color=\"secondary\" variant=\"contained\" onClick={newGame}>\n          Iniciar novo jogo\n        </Button>\n      </Grid>\n    );\n  };\n\n  const renderGame = () => {\n    return (\n    <>\n\n      <Grid container item xs={12} alignItems=\"center\" justify=\"center\">\n        <Grid item xs={10} sm={10}>\n          <Paper>\n            <span style={{ fontSize: 23, padding: 10 }}>{n1}</span>X\n            <span style={{ fontSize: 23, padding: 10 }}>{n2}</span>=\n            <span style={{ fontSize: 24, padding: 10 }}>{result}</span>\n          </Paper>\n        </Grid>\n        <Grid item xs={10} sm={10}>\n          <Paper style={{height:\"1em\"}}>\n            <LinearProgress  variant=\"determinate\" value={timer}/>\n          </Paper>\n        </Grid>\n\n        <Grid\n          xs={12}\n          sm={12}\n          container\n          item\n          alignItems=\"center\"\n          justify=\"center\"\n        />\n        \n        <Keyboard onKeyPressed={registerNumber} />\n        <Grid container item xs={12} alignItems=\"center\" justify=\"center\">\n          \n          <Button color=\"secondary\" variant=\"contained\" onClick={answer}>\n            Responder\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n    );\n  };\n\n  return (\n    <div>\n      {gameLogic.gameOver && (\n        <GameOver score={gameLogic.score} record={gameLogic.record} />\n      )}\n      {gameLogic.gameInProgress && !gameLogic.gameOver && renderGame()}\n\n      {!gameLogic.gameInProgress && renderMainMenu()}\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Tabuada);\n","import React, { Component } from 'react';\nimport Tabuada from './components/Tabuada';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Desafio Tabuada</h1>\n        </header>\n        <Tabuada />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}